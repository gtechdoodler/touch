{"version":3,"sources":["components/Events/Event.js","components/Perf/Perf.js","App.js","serviceWorker.js","index.js"],"names":["addDocumentListener","registeredListeners","events","ev","console","log","window","resolveEvent","includes","push","document","addEventListener","e","forEach","f","this","Map","key","func","overrideKey","has","set","perfContainer","createElement","id","style","position","padding","body","appendChild","lastTimeOrigin","requestAnimationFrame","addMarker","timeOrigin","pixelSpacing","Math","ceil","marker","display","margin","width","height","backgroundColor","perf","App","useState","touchMoveStatus","scrollStatus","setScrollStatus","useEffect","event","on","throttle","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAOMA,EAAsB,SAACC,EAAqBC,EAAQC,GACxDA,EARmB,SAACA,GACpB,GAAW,WAAPA,EAEF,OADAC,QAAQC,IAAIC,QACL,cAAeA,OAAS,YAAcH,EAK1CI,CAAaJ,GAClBC,QAAQC,IAAI,WAAYF,GACnBF,EAAoBO,SAASL,KAChCF,EAAoBQ,KAAKN,GACzBO,SAASC,iBAAiBR,GAAI,SAACS,GAC7BV,EAAOW,SAAQ,SAAAC,GACbA,EAAEF,WAoBK,M,WAbb,aAAe,oBACbG,KAAKd,oBAAsB,GAC3Bc,KAAKb,OAAS,IAAIc,I,+CAGjBb,EAAIc,EAAKC,GAA4B,IAAtBC,EAAqB,wDACrCnB,EAAoBe,KAAKd,oBAAqBc,KAAKb,OAAQC,IACvDgB,GAAgBJ,KAAKb,OAAOkB,IAAIH,IAClCF,KAAKb,OAAOmB,IAAIJ,EAAKC,O,uBC3BZ,WAEb,IAAII,EAAgBZ,SAASa,cAAc,WAC3CD,EAAcE,GAAK,eACnBF,EAAcG,MAAMC,SAAW,QAC/BJ,EAAcG,MAAME,QAAU,OAC9BjB,SAASkB,KAAKC,YAAYP,GAE1B,IAAIQ,EAAiB,EACrBC,uBAAsB,SAASC,EAAUC,GACvC,IACIC,GADiBD,EAAaH,GACI,MAAS,EAC/CI,EAAeC,KAAKC,KAAKF,GACzBJ,EAAiBG,EAEjB,IAAII,EAAS3B,SAASa,cAAc,OACpCc,EAAOZ,MAAMa,QAAU,eACvBD,EAAOZ,MAAMc,OAAb,cAA6BL,EAA7B,cACAG,EAAOZ,MAAMe,MAAQ,MACrBH,EAAOZ,MAAMgB,OAAS,MACtBJ,EAAOZ,MAAMiB,gBAAkB,QAC/BpB,EAAcO,YAAYQ,GAC1BN,sBAAsBC,MClB1BW,GAgCeC,MA9Bf,WAAe,MAIiCC,mBAAS,IAJ1C,mBAINC,EAJM,aAK2BD,mBAAS,OALpC,mBAKNE,EALM,KAKQC,EALR,KAoBb,OAbAC,qBAAU,cACP,IAOHC,EAAMC,GAAG,SAAU,gBAAiBC,KAAS,SAACxC,GAE5CoC,EAAgB,YACf,MAGD,yBAAKK,UAAU,OACb,yBAAKA,UAAU,iBACb,6BAAMP,GACN,6BAAMC,MCpBMO,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAjD,SAASkD,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.f4314aa1.chunk.js","sourcesContent":["const resolveEvent = (ev) => {\r\n  if (ev === 'scroll') {\r\n    console.log(window);\r\n    return 'touchmove' in window ? 'touchmove' : ev;\r\n  }\r\n}\r\n\r\nconst addDocumentListener = (registeredListeners, events, ev) => {\r\n  ev = resolveEvent(ev);\r\n  console.log('resolved', ev);\r\n  if (!registeredListeners.includes(ev)) {\r\n    registeredListeners.push(ev);\r\n    document.addEventListener(ev, (e) => {\r\n      events.forEach(f => {\r\n        f(e);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nclass Event {\r\n  constructor() {\r\n    this.registeredListeners = [];\r\n    this.events = new Map();\r\n  }\r\n\r\n  on(ev, key, func, overrideKey = false) {\r\n    addDocumentListener(this.registeredListeners, this.events, ev);\r\n    if (overrideKey || !this.events.has(key)) {\r\n      this.events.set(key, func);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new Event();","import './Perf.css';\r\n\r\nexport default function () {\r\n\r\n  let perfContainer = document.createElement('section');\r\n  perfContainer.id = 'sec_performo';\r\n  perfContainer.style.position = 'fixed';\r\n  perfContainer.style.padding = '10px';\r\n  document.body.appendChild(perfContainer);\r\n\r\n  let lastTimeOrigin = 0;\r\n  requestAnimationFrame(function addMarker(timeOrigin) {\r\n    let timeOriginDiff = timeOrigin - lastTimeOrigin;\r\n    let pixelSpacing = ((timeOriginDiff / 16.67) * 2);\r\n    pixelSpacing = Math.ceil(pixelSpacing);    \r\n    lastTimeOrigin = timeOrigin;\r\n\r\n    let marker = document.createElement('div');\r\n    marker.style.display = 'inline-block';\r\n    marker.style.margin = `1px ${pixelSpacing}px 1px 1px`;\r\n    marker.style.width = '5px';\r\n    marker.style.height = '5px';\r\n    marker.style.backgroundColor = 'green';\r\n    perfContainer.appendChild(marker);\r\n    requestAnimationFrame(addMarker);\r\n  })\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport perf from './components/Perf/Perf';\nimport event from './components/Events/Event';\nimport throttle from 'lodash.throttle';\n\nperf();\n\nfunction App() {\n\n  //console.log('Loading');\n\n  const [touchMoveStatus, setTouchMoveStatus] = useState('');\n  const [scrollStatus, setScrollStatus] = useState(null);\n\n  useEffect(() => {\n  }, [])\n\n  /*event.on('touchmove', 'lazyloading', throttle((e) => {\n    //console.log('touchmove', e);\n    setTouchMoveStatus('Moved!')\n  }, 100));*/\n\n  event.on('scroll', 'scrollingtest', throttle((e) => {\n    //console.log('scroll', e);\n    setScrollStatus('Moved!')\n  }, 100));\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <div>{touchMoveStatus}</div>\n        <div>{scrollStatus}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}